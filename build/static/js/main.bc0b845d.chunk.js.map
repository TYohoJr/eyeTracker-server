{"version":3,"sources":["CurrentPage/CurrentPage.js","RandomDot/RandomDot.js","EyeTest/EyeTest.js","Options/Options.js","reducers.js","App.js","serviceWorker.js","index.js"],"names":["CurrentPage","react_default","a","createElement","this","props","currentPageReducer","currentPage","Component","connect","state","counter","RandomDot","_this","console","log","formInputsReducer","dotSpeed","timerID","setInterval","dotNumber","dispatch","type","src_Options_Options","clearInterval","topPercent","Math","floor","random","leftPercent","dotPlacementReducer","id","style","height","width","borderRadius","backgroundColor","extraDotColor","display","position","top","left","EyeTest","src_RandomDot_RandomDot","centerDotColor","Options","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onCenterDotColorChange","bind","assertThisInitialized","onExtraDotColorChange","onDotSpeedChange","onRunButton","onDotNumberChange","e","target","value","src_EyeTest_EyeTest","Form","FormGroup","Label","for","Input","name","onChange","min","max","step","placeholder","Button","onClick","combineReducers","action","objectSpread","Number","concat","store","createStore","reducer","App","es","className","src_CurrentPage_CurrentPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc0b845d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CurrentPage.css';\nimport { connect } from 'react-redux';\n\nclass CurrentPage extends Component {\n  render() {\n    return (\n      <div>\n        <div>\n            {this.props.currentPageReducer.currentPage}\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default connect((state) => (state))(CurrentPage);","import React, { Component } from 'react';\nimport './RandomDot.css';\nimport { connect } from 'react-redux';\nimport Options from \"../Options/Options.js\";\n\nvar counter = 0;\n\nclass RandomDot extends Component {\n    componentDidMount() {\n        console.log(this.props.formInputsReducer.dotSpeed)\n        this.timerID = setInterval(() => {\n            if (counter === this.props.formInputsReducer.dotNumber) {\n                counter = 1;\n                this.props.dispatch({\n                    type: \"changeCurrentPage\",\n                    currentPage: <Options />\n                })\n                clearInterval(this.timerID);\n            } else {\n                this.props.dispatch({\n                    type: \"changeDotLocation\",\n                    topPercent: Math.floor(Math.random() * 89),\n                    leftPercent: Math.floor(Math.random() * 89),\n                })\n                counter++;\n            }\n            console.log(this.props.dotPlacementReducer.topPercent)\n        }, this.props.formInputsReducer.dotSpeed * 1000)\n    }\n\n    render() {\n        return (\n            <div>\n                <span id=\"RandomDot\" style={{\n                    \"height\": \"30px\",\n                    \"width\": \"30px\",\n                    \"borderRadius\": \"50%\",\n                    \"backgroundColor\": this.props.formInputsReducer.extraDotColor,\n                    \"display\": \"inline-block\",\n                    \"position\": \"fixed\",\n                    \"top\": this.props.dotPlacementReducer.topPercent,\n                    \"left\": this.props.dotPlacementReducer.leftPercent,\n                }} />\n            </div >\n        );\n    }\n}\n\nexport default connect((state) => (state))(RandomDot);","import React, { Component } from 'react';\nimport './EyeTest.css';\nimport { connect } from 'react-redux';\nimport RandomDot from '../RandomDot/RandomDot.js';\n\nclass EyeTest extends Component {\n  render() {\n    return (\n      <div>\n        <RandomDot />\n        <span id=\"centerDot\" style={{\n          \"height\": \"30px\",\n          \"width\": \"30px\",\n          \"borderRadius\": \"50%\",\n          \"backgroundColor\": this.props.formInputsReducer.centerDotColor,\n          \"display\": \"inline-block\",\n          \"position\": \"fixed\",\n          \"top\": \"50%\",\n          \"left\": \"50%\",\n        }} />\n      </div >\n    );\n  }\n}\n\nexport default connect((state) => (state))(EyeTest);","import React, { Component } from 'react';\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\nimport './Options.css';\nimport { connect } from 'react-redux';\nimport EyeTest from '../EyeTest/EyeTest';\n\nclass Options extends Component {\n  constructor() {\n    super();\n    this.onCenterDotColorChange = this.onCenterDotColorChange.bind(this);\n    this.onExtraDotColorChange = this.onExtraDotColorChange.bind(this);\n    this.onDotSpeedChange = this.onDotSpeedChange.bind(this);\n    this.onRunButton = this.onRunButton.bind(this);\n    this.onDotNumberChange = this.onDotNumberChange.bind(this);\n  }\n\n  onCenterDotColorChange(e) {\n    this.props.dispatch({\n      type: \"changeCenterDotColor\",\n      centerDotColor: e.target.value\n    })\n  }\n\n  onExtraDotColorChange(e) {\n    this.props.dispatch({\n      type: \"changeExtraDotColor\",\n      extraDotColor: e.target.value\n    })\n  }\n\n  onDotSpeedChange(e) {\n    this.props.dispatch({\n      type: \"changeDotSpeed\",\n      dotSpeed: e.target.value\n    })\n  }\n\n  onDotNumberChange(e) {\n    this.props.dispatch({\n      type: \"changeDotNumber\",\n      dotNumber: e.target.value\n    })\n  }\n\n  onRunButton(e) {\n    this.props.dispatch({\n      type: \"changeCurrentPage\",\n      currentPage: <EyeTest />\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Form id=\"options-form\">\n          <FormGroup>\n            <Label for=\"centerDotColor\">Center Dot Color: </Label>\n            <Input type=\"select\" name=\"centerDotColor\" onChange={this.onCenterDotColorChange}>\n              <option>Black</option>\n              <option>Red</option>\n              <option>Blue</option>\n              <option>Green</option>\n            </Input>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"extraDotColor\">Extra Dot Color: </Label>\n            <Input type=\"select\" name=\"extraDotColor\" onChange={this.onExtraDotColorChange}>\n              <option>Red</option>\n              <option>Black</option>\n              <option>Blue</option>\n              <option>Green</option>\n            </Input>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"dotSpeed\">Dot Speed(seconds) </Label>\n            <Input type=\"number\" min=\"1\" max=\"5\" step=\".1\" placeholder={this.props.formInputsReducer.dotSpeed} onChange={this.onDotSpeedChange} />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"dotNumber\">Number of Cycles </Label>\n            <Input type=\"number\" min=\"5\" max=\"30\" step=\"1\" placeholder={this.props.formInputsReducer.dotNumber} onChange={this.onDotNumberChange} />\n          </FormGroup>\n          <Button onClick={this.onRunButton}>Run</Button>\n        </Form>\n      </div >\n    );\n  }\n}\n\nexport default connect((state) => (state))(Options);","import React from 'react';\nimport { combineReducers } from 'redux';\nimport Options from './Options/Options.js';\n\nconst dotPlacementReducer = (state, action) =>{\n    if(!state) {\n        state = {\n            topPercent: `${null}%`,\n            leftPercent: `${null}%`,\n        }\n    }\n    switch (action.type) {\n        case \"changeDotLocation\":\n            return state = {\n                ...state,\n                topPercent: `${action.topPercent}%`,\n                leftPercent: `${action.leftPercent}%`,\n            }\n        default:\n            return state = {\n                ...state\n            }\n    }\n}\n\nconst currentPageReducer = (state, action) => {\n    if(!state) {\n        state = {\n            currentPage:<Options />\n        }\n    }\n    switch (action.type) {\n        case \"changeCurrentPage\":\n            return state = {\n                ...state,\n                currentPage: action.currentPage\n            }\n        default:\n            return state = {\n                ...state\n            }\n    }\n}\n\nconst formInputsReducer = (state, action) => {\n    if (!state) {\n        state = {\n            centerDotColor: \"Black\",\n            extraDotColor: \"Red\",\n            dotSpeed: 1,\n            dotNumber: 5\n        }\n    }\n    switch (action.type) {\n        case \"changeCenterDotColor\":\n            return state = {\n                ...state,\n                centerDotColor: action.centerDotColor\n            }\n        case \"changeExtraDotColor\":\n            return state = {\n                ...state,\n                extraDotColor: action.extraDotColor\n            }\n        case \"changeDotSpeed\":\n            return state = {\n                ...state,\n                dotSpeed: Number(action.dotSpeed)\n            }\n        case \"changeDotNumber\":\n            return state = {\n                ...state,\n                dotNumber: Number(action.dotNumber)\n            }\n        default:\n            return state = {\n                ...state\n            }\n    }\n}\n\nexport default combineReducers({\n    formInputsReducer: formInputsReducer,\n    currentPageReducer: currentPageReducer,\n    dotPlacementReducer: dotPlacementReducer,\n});\n","import React, { Component } from 'react';\nimport './App.css';\nimport CurrentPage from './CurrentPage/CurrentPage.js';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer);\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store} >\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <Options />\n          <EyeTest /> */}\n          <CurrentPage />\n        </header>\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}